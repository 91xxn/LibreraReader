#1
source/html/epub-doc.c
//if (fz_has_archive_entry(ctx, zip, "META-INF/rights.xml"))
//		fz_throw(ctx, FZ_ERROR_GENERIC, "EPUB is locked by DRM");
//	if (fz_has_archive_entry(ctx, zip, "META-INF/encryption.xml"))
//		fz_throw(ctx, FZ_ERROR_GENERIC, "EPUB is locked by DRM");


source/html/css-apply.c
	else if (!strcmp(value->data, "inherit")) style->font_size = make_number(1.0f, N_SCALE);
	
	if (p[0] == 'r' && p[1] == 'e')
		return make_number(x, N_SCALE);
		
//noto.c
#define NOTO_SMALL


//add fb2 styles to main styles

//html-layout.c
//static void measure_image(

	if(image_w < max_w/7 && image_h < max_h/7){ //very small parts
		xs = 7;
		ys = 7;
	}else if(image_w < max_w && image_h < max_h/7){//line images
		xs = max_w / image_w;
		ys = max_h / image_h;
	}else if(image_w < max_w/2.5 && image_h < max_h/4){//line images
		xs = 2.5;
		ys = 2.5;	
	}

//stext-output.c
void
fz_print_stext_page(fz_context *ctx, fz_output *out, fz_stext_page *page)
{
	int block_n;

	for (block_n = 0; block_n < page->len; block_n++)
	{
		switch (page->blocks[block_n].type)
		{
		case FZ_PAGE_BLOCK_TEXT:
		{
			fz_stext_block *block = page->blocks[block_n].u.text;
			fz_stext_line *line;
			fz_stext_char *ch;
			char utf[10];
			int i, n;

			for (line = block->lines; line < block->lines + block->len; line++)
			{
				fz_stext_span *span;
				for (span = line->first_span; span; span = span->next)
				{
					
					
					int is_bold = 0;
					int is_italic = 0;

					if (fz_font_is_bold(ctx, span->text->style->font)){
						is_bold = 1;
						fz_write_printf(ctx,out,"<b>");
					}

					if (fz_font_is_italic(ctx, span->text->style->font)){
						is_italic = 1;
						fz_write_printf(ctx,out,"<i>");
					}

					
					for (ch = span->text; ch < span->text + span->len; ch++)
					{
						n = fz_runetochar(utf, ch->c);
						
						for (i = 0; i < n; i++){							
							fz_write_printf(ctx, out, "%c", utf[i]);
						}
						
					}

					if(is_bold){
						fz_write_printf(ctx,out,"</b>&nbsp;");
					}

					if(is_italic){
						fz_write_printf(ctx,out,"</i>&nbsp;");
					}

				}
				fz_write_printf(ctx, out, "<br/>");
			}
			//fz_printf(ctx, out, "<br/>");
			break;
		}
		case FZ_PAGE_BLOCK_IMAGE:
		{
			break;
		}
		}
	}
}